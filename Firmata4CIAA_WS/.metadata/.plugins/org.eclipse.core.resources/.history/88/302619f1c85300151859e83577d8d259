/*
 * IO_DRIVER.c
 *
 * LPC 4337
 *  Created on: Aug 10, 2015
 *      Author: ian
 */

/*==================[inclusions]=============================================*/
#include "main.h"
#include "IO_DRIVER.h"

/*==================[macros and definitions]=================================*/

/*==================[internal data declaration]==============================*/
/* Aclaraciones y ejemplos:
 * De los nombres de la placa y pines hay que tener en cuenta 3 cosas:
 * 1- GPIOn, que es solo el nombre del pin en la placa
 * 2- GPIOport[pin], que es el nombre de ese GPIO en particular
 * 3- Pport_pin, que es el nombre del pin en particular
 * Por ejemplo: en el pin físico del LPC4337 n°74 (pin n°29 de la tira de pines P2) está conectado el GPIO0,
 * el cual es equivalente a P6_1 y se traduce a GPIO3[0] si se elige la función 1 del PIN.
 * Para la función Chip_SCU_PinMux, que es la que permite la configuración de funciones de un pin,
 * hay que utilizar el P6_1 (port=6, pin=1) y elegir FUNC0 si se desea trabajar con el GPIO3[0]
 * En cuanto a Chip_GPIO_SetDir hay que utilizar el nombre del GPIO,que sería GPIO3[0] (port=3, pin=0)
 *
 * Se recomienda fuertemente referirse al archivo EDU-CIAA-NXP_Pinout,
 * en donde están concentrados todos los nombres con los que trabajaremos.
 * Fuentes: http://proyecto-ciaa.com.ar/devwiki/doku.php?id=desarrollo:edu-ciaa:edu-ciaa-nxp
 * 			http://proyecto-ciaa.com.ar/devwiki/lib/exe/fetch.php?media=edu-ciaa-nxp:edu-ciaa-nxp_pinout_a4_v3r2_es.pdf
 */

/*	------------------ Mapeo de pines ------------------
 * Esto sirve para desprenderse de los nombres de las placas y pasar a algo mas simple como PIN1,.... ETC
 *
 * De cada pin necesito saber: el nombre del pin (P, el nombre del GPIO y función por defecto, que serán:
 * - Para pines digitales, la del GPIO, por lo que se guarda la función que corresponda a cada pin.
 * Todos los pines que no sean los de los Switches (PULS_0,..., PULS_4) serán inicializados como salidas
 * - Para pines analogicos, las funciónes de ADC o DAC.
 * Por lo tanto, la estructura ciaaPin_t tendrá en sus campos:
 * { Pport , Ppin , GPIOport , GPIOpin , defaultFunc }
 */

/* GPIO pin Numbers */
ciaaP CIAApins[] = {
/*Nombre mapeado								Nombre en la placa*/
/*PIN1*/				{1,0,0,4,FUNC0},		/*PULS_0   TEC_1*/
/*PIN2*/				{1,1,0,8,FUNC0},		/*PULS_1   TEC_2*/
/*PIN3*/				{1,2,0,9,FUNC0},		/*PULS_2   TEC_3*/
/*PIN4*/				{1,6,1,9,FUNC0},		/*PULS_3   TEC_4*/

/*PIN5*/				{2,0,5,0,FUNC4},		/*LED0_R*/
/*PIN6*/				{2,1,5,1,FUNC4},		/*LED0_G*/
/*PIN7*/				{2,2,5,2,FUNC4},		/*LED0_B*/
/*PIN8*/				{2,10,0,14,FUNC0},		/*LED1*/
/*PIN9*/				{2,11,1,11,FUNC0},		/*LED2*/
/*PIN10*/				{2,12,1,12,FUNC0},		/*LED3*/

/*PIN11*/				{6,1,3,0,FUNC0},		/*GPIO0*/
/*PIN12*/				{6,4,3,3,FUNC0},		/*GPIO1*/
/*PIN13*/				{6,5,3,4,FUNC0},		/*GPIO2*/
/*PIN14*/				{6,7,5,15,FUNC4},		/*GPIO3*/
/*PIN15*/				{6,8,5,16,FUNC4},		/*GPIO4*/
/*PIN16*/				{6,9,3,5,FUNC0},		/*GPIO5*/
/*PIN17*/				{6,10,3,6,FUNC0},		/*GPIO6*/
/*PIN18*/				{6,11,3,7,FUNC0},		/*GPIO7*/
/*PIN19*/				{6,12,3,8,FUNC0},		/*GPIO8*/	//FIXME: actualmente no anda.

/*PIN20*/				{4,4,2,4,FUNC0},		/*LCD1*/
/*PIN21*/				{4,5,2,5,FUNC0},		/*LCD2*/
/*PIN22*/				{4,6,2,6,FUNC0},		/*LCD3*/
/*PIN23*/				{4,10,5,14,FUNC4},		/*LCD4*/
/*PIN24*/				{4,8,5,12,FUNC4},		/*LCD_RS*/
/*PIN25*/				{4,9,5,13,FUNC4},		/*LCD_EN*/

/*PIN26*/				{4,0,2,0,FUNC0},		/*T_FIL0*/
/*PIN27*/				{4,1,2,1,FUNC0},		/*T_FIL1*/
/*PIN28*/				{4,2,2,2,FUNC0},		/*T_FIL2*/
/*PIN29*/				{4,3,2,3,FUNC0},		/*T_FIL3*/
/*PIN30*/				{1,5,1,8,FUNC0},		/*T_COL0*/
/*PIN31*/				{7,4,3,12,FUNC0},		/*T_COL1*/
/*PIN32*/				{7,5,3,13,FUNC0},		/*T_COL2*/

/*Pines analógicos*/
/*PIN33*/				{7,5,3,13,FUNC0}		/**/

/*TODO: falta los pines de CAN y 232, además de los analógicos*/
					};

/*==================[internal functions declaration]=========================*/
static void analogPinsInit(void);
static void boardPinsInit(void);
/*==================[internal data definition]===============================*/

uint16_t ADCbuffer[3] = {0,0,0};

/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/
//TODO: Hacer
static void analogPinsInit(void)
{
	ADC_CLOCK_SETUP_T ADCSetup;

	/*
	 *Chip_ADC_Init inicializa el periférico ADC (el LPC4337 tiene: LPC_ADC0 y 1)
	 *Chip_ADC_EnableChannel habilita un canal del ADC (el LPC4337 tiene: ADC_CH1, 2 y 3)
	*/

	/*Configuro los pines correspondientes a los canales de ADC*/

	/*Habilito el ADC0*/
	Chip_ADC_Init(LPC_ADC0,&ADCSetup);
	Chip_ADC_SetBurstCmd(LPC_ADC0, DISABLE);

	Chip_ADC_EnableChannel(LPC_ADC0,ADC_CH1,DISABLE);
	Chip_ADC_Int_SetChannelCmd(LPC_ADC0,ADC_CH1,DISABLE);

	Chip_ADC_EnableChannel(LPC_ADC0,ADC_CH2,DISABLE);
	Chip_ADC_Int_SetChannelCmd(LPC_ADC0,ADC_CH2,DISABLE);

	Chip_ADC_EnableChannel(LPC_ADC0,ADC_CH3,DISABLE);
	Chip_ADC_Int_SetChannelCmd(LPC_ADC0,ADC_CH3,DISABLE);

}

static void boardPinsInit(void)
{
	OPTIMAL_DATA_TYPE i=0, mode=INPUT;

	for(i=PIN1;i<=PIN32;i++)
	{
		if(i>=DIGITAL_INPUTS)
		{
			/*Si ya setee las entradas (INPUTS. En este caso los pulsadores), seteo las salidas (OUTPUTS. En este caso los leds y el resto de los pines por defecto)*/
			mode=OUTPUT;
		}
		Chip_SCU_PinMux(CIAApins[i].Pport , CIAApins[i].Ppin , MD_PUP|MD_EZI|MD_ZI , CIAApins[i].defaultFunc);
		Chip_GPIO_SetDir(LPC_GPIO_PORT , CIAApins[i].GPIOport , (1<<CIAApins[i].GPIOpin), mode);
		//IO_DRIVER_SetOutput(i,	OFF);	las salidas por defecto están apagadas parece. o sea q esto es innecesario
	}
}


/*==================[external functions definition]==========================*/
void IO_DRIVER_Init(void)
{
	SystemCoreClockUpdate();

	Chip_GPIO_Init(LPC_GPIO_PORT);
	analogPinsInit();
	boardPinsInit();
}

void IO_DRIVER_UpdateTask(void *pvParameters)
{
	OPTIMAL_DATA_TYPE channel=1;
	portTickType xLastExecutionTime;

	xLastExecutionTime = xTaskGetTickCount();

	while(1)
	{
		/*Update ADCs values*/
		for(channel=1;channel<=3;channel++)
		{
			Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
			Chip_ADC_EnableChannel(LPC_ADC0,channel,ENABLE);
			while((Chip_ADC_ReadStatus(LPC_ADC0 , channel , ADC_DR_DONE_STAT) != SET));
			Chip_ADC_ReadValue(LPC_ADC0 , channel, &ADCbuffer[channel-1]);
			Chip_ADC_EnableChannel(LPC_ADC0,channel,DISABLE);
		}
		channel=1;
	}

	vTaskDelayUntil( &xLastExecutionTime, 50 / portTICK_RATE_MS ); // periódica
}

//Dice si el pin es entrada o salida. 1 para Output, 0 para input
OPTIMAL_DATA_TYPE IO_DRIVER_CheckPin(OPTIMAL_DATA_TYPE pinNumber)
{
	return Chip_GPIO_GetPinDIR( LPC_GPIO_PORT, CIAApins[pinNumber].GPIOport , CIAApins[pinNumber].GPIOpin );
}

/*Setea un valor de una salida*/
void IO_DRIVER_SetOutput(OPTIMAL_DATA_TYPE pinNumber, OPTIMAL_DATA_TYPE value)
{
	if(IO_DRIVER_CheckPin(pinNumber))
	{
		Chip_GPIO_SetPinState( LPC_GPIO_PORT, CIAApins[pinNumber].GPIOport , CIAApins[pinNumber].GPIOpin, value);
	}
}

/* TODO
 * Por ahora solo vale para GPIOs, depues hay que agregarle las otras funciones
 * En otras palabras: mode=INPUT o OUTPUT*/
void IO_DRIVER_ChangePinMode(OPTIMAL_DATA_TYPE pinNumber, OPTIMAL_DATA_TYPE mode)
{
	Chip_GPIO_SetDir(LPC_GPIO_PORT , CIAApins[pinNumber].GPIOport , CIAApins[pinNumber].GPIOpin, mode);
}


/* Obtiene el valor del pin. Si sale del rango de pines válidos devuelve 0 //xxx: podría devolver -1 como error...
   Nota: para pulsadores con pull-up devolverá 1 cuando no esté presionado*/
OPTIMAL_DATA_TYPE IO_DRIVER_GetPinState(OPTIMAL_DATA_TYPE pinNumber)
{
	OPTIMAL_DATA_TYPE ret=0;
	if (pinNumber<TOTAL_DIGITAL_PINS)	/*anti fallas. cuando se pase de la cantidad de pines creados devuelve 0*/
	{
		ret = Chip_GPIO_GetPinState( LPC_GPIO_PORT, CIAApins[pinNumber].GPIOport , CIAApins[pinNumber].GPIOpin );
	}
	return(ret);
}

/*Tarea para probar los pulsadores y leds de la placa*/
void IO_DRIVER_BoardTestTask(void *pvParameters )
{
	OPTIMAL_DATA_TYPE a=0,i=0;
	portTickType xLastExecutionTime;

	xLastExecutionTime = xTaskGetTickCount();

	while(1)
	{
		/*
		IO_DRIVER_SetOutput(	LED0_R	,	!(IO_DRIVER_GetPinState(BUTTON_1))	);	//los pulsadores tienen pull-up
		IO_DRIVER_SetOutput(	LED0_G	,	!(IO_DRIVER_GetPinState(BUTTON_1))	);
		IO_DRIVER_SetOutput(	LED0_B	,	!(IO_DRIVER_GetPinState(BUTTON_1))	);
		IO_DRIVER_SetOutput(	LED1	,	!(IO_DRIVER_GetPinState(BUTTON_2))	);
		IO_DRIVER_SetOutput(	LED2	,	!(IO_DRIVER_GetPinState(BUTTON_3))	);
		IO_DRIVER_SetOutput(	LED3	,	!(IO_DRIVER_GetPinState(BUTTON_4))	);
		for (i=PIN11;i<=PIN32;i++)
		{
			IO_DRIVER_SetOutput(	i	,	!(IO_DRIVER_GetPinState(BUTTON_1))	);
		}
		*/
		IO_DRIVER_SetOutput(	LED3	,	!(IO_DRIVER_GetPinState(BUTTON_4))	);

		//Fuente: http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__adc_2adc_8c_source.html
		//Linea 221


		if(ADCbuffer[0]<200)	//Channel 1
		{
			IO_DRIVER_SetOutput(	LED0_R	,	TRUE	);
		}
		else
		{
			IO_DRIVER_SetOutput(	LED0_R	,	FALSE	);
		}
		if(ADCbuffer[1]<200)	//Channel 2
		{
			IO_DRIVER_SetOutput(	LED0_G	,	TRUE	);
		}
		else
		{
			IO_DRIVER_SetOutput(	LED0_G	,	FALSE	);
		}
		if(ADCbuffer[2]<200)	//Channel 3
		{
			IO_DRIVER_SetOutput(	LED0_B	,	TRUE	);
		}
		else
		{
			IO_DRIVER_SetOutput(	LED0_B	,	FALSE	);
		}
		vTaskDelayUntil( &xLastExecutionTime, 100 / portTICK_RATE_MS ); // periódica
	}
}

//Versión se prueba diseñada para el firmata, que espera puertos de 8 bits. Setea salidas.
void IO_DRIVER_SetPort(uint8_t portNum, uint8_t portValue)
{
	OPTIMAL_DATA_TYPE i;
	for(i=0;i<8;i++)
	{
		IO_DRIVER_SetOutput(i,(portValue>>i)&0x1);
	}
}

/*
 * Devuelve el valor de los "puertos de 8 bits" que necesita el firmata para trabajar.
 * Devuelve -1 si no hubo cambio en los valores del puerto desde la ultima vez que se entró a la función..
 *
*/
int16_t IO_DRIVER_GetPort(uint8_t portNum)
{
	static int16_t 	portVal[16]	={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},portValAnt[16]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	OPTIMAL_DATA_TYPE i, init=portNum*8;
	uint8_t pinState=0;
	for(i=0;i<8;i++)	//xxx: 8 pq "los puertos son de 8"
	{
		pinState=IO_DRIVER_GetPinState(i+init);
		if(pinState)
		{
			portVal[portNum] |= 1<<i;		//set bit
		}
		else
		{
			portVal[portNum] &= ~(1<<i);	//clear bit
		}
	}
	if(portVal[portNum] == portValAnt[portNum])
	{
		return(-1);		//Sin cambios
	}
	else
	{
		portValAnt[portNum] = portVal[portNum];
		return(portVal[portNum]);
	}
}

/*==================[end of file]============================================*/
