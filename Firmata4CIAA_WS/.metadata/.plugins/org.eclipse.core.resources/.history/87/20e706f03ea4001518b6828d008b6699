/*
 * TIMER_DRIVER.c
 *
 *  Created on: 5/11/2015
 *      Author: Ian
 */

/*==================[inclusions]=============================================*/
#include "main.h"
#include "chip.h"
#include "TIMER_DRIVER.h"

/*==================[macros and definitions]=================================*/
#define LPC4337_MAX_FREC		204000000 //Frecuencia del micro

#define MAX_SYSCALL_INTERRUPT_PRIORITY	5


/*==================[internal data declaration]==============================*/
typedef struct
{
	LPC_TIMER_T *name;
	uint32_t RGU; //Reset Generator Unit
	uint32_t IRQn;

}timerStaticData_t;

typedef struct
{
	voidFunctionPointer_t timerCompareMatchFunctionPointer[4];
}timerDinamicData_t;


/*==================[internal functions declaration]=========================*/

/*Causes:
 * User forgot to initialize the functions for the compare match interrupt on TIMER_DRIVER_InitTimer call
 * FIXME: si, cuando las frecuencias de las compare match 1, 2 y 3 son 0 (sin compare match),
 *  le pusiste vos ian un periodo lo suficientemente chico como para que antes de que llegue al compare match 0
 *  llegue el momento de ese compare match
 */
static void errorOcurred(void)
{
	while(1);
}

static void doNothing(void)
{

}
/*==================[internal data definition]===============================*/

/*Timers Static Data, given by the uC libraries*/
const timerStaticData_t timer_sd[4] =
{
		{LPC_TIMER0,RGU_TIMER0_RST,TIMER0_IRQn},
		{LPC_TIMER1,RGU_TIMER1_RST,TIMER1_IRQn},
		{LPC_TIMER2,RGU_TIMER2_RST,TIMER2_IRQn},
		{LPC_TIMER3,RGU_TIMER3_RST,TIMER3_IRQn}
};

/*Timers dynamic data. Function pointers and Compare match frequencies, which can vary.
 * This is the default initialization*/
timerDinamicData_t timer_dd[4] =
{
		{doNothing,errorOcurred,errorOcurred,errorOcurred},
		{doNothing,errorOcurred,errorOcurred,errorOcurred},
		{doNothing,errorOcurred,errorOcurred,errorOcurred},
		{doNothing,errorOcurred,errorOcurred,errorOcurred}
};


/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/
/* * @brief: Executes the functions passed by parameter in the TIMER_DRIVER_InitTimer, at the chosen frequencies
 *
 * */
void TIMER0_IRQHandler(void)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	uint8_t timer_match_number = 0;

	for(timer_match_number = 0 ; timer_match_number <= TIMER_MATCH_3 ; timer_match_number++ )
	{
		if (Chip_TIMER_MatchPending(LPC_TIMER0, timer_match_number))
		{
			/*Run the functions saved in the timer dynamic data structure*/
			(*timer_dd[TIMER_0].timerCompareMatchFunctionPointer[timer_match_number])();
			Chip_TIMER_ClearMatch(LPC_TIMER0, timer_match_number);
		}
	}
}


void TIMER1_IRQHandler(void)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	uint8_t timer_match_number = 0;

	for(timer_match_number = 0 ; timer_match_number <= TIMER_MATCH_3 ; timer_match_number++ )
	{
		if (Chip_TIMER_MatchPending(LPC_TIMER1, timer_match_number))
		{
			/*Run the functions saved in the timer dynamic data structure*/
			(*timer_dd[TIMER_1].timerCompareMatchFunctionPointer[timer_match_number])();
			Chip_TIMER_ClearMatch(LPC_TIMER1, timer_match_number);
		}
	}
}

void TIMER2_IRQHandler(void)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	uint8_t timer_match_number = 0;

	for(timer_match_number = 0 ; timer_match_number <= TIMER_MATCH_3 ; timer_match_number++ )
	{
		if (Chip_TIMER_MatchPending(LPC_TIMER2, timer_match_number))
		{
			/*Run the functions saved in the timer dynamic data structure*/
			(*timer_dd[TIMER_2].timerCompareMatchFunctionPointer[timer_match_number])();
			Chip_TIMER_ClearMatch(LPC_TIMER2, timer_match_number);
		}
	}
}

void TIMER3_IRQHandler(void)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	uint8_t timer_match_number = 0;

	for(timer_match_number = 0 ; timer_match_number <= TIMER_MATCH_3 ; timer_match_number++ )
	{
		if (Chip_TIMER_MatchPending(LPC_TIMER3, timer_match_number))
		{
			/*Run the functions saved in the timer dynamic data structure*/
			(*timer_dd[TIMER_3].timerCompareMatchFunctionPointer[timer_match_number])();
			Chip_TIMER_ClearMatch(LPC_TIMER3, timer_match_number);
		}
	}
}
/*==================[external functions definition]==========================*/


/*
 * @brief	Initialize Timer peripheral
 * @param	timerNumber   : Can be TIMER_0, TIMER_1, TIMER_2 or TIMER_3
 * @param	ticks   	  : Number of ticks required to finish the cycle.
 * @param	voidFunctionPointer: function to be executed at the end of the timer cycle
 * @return	None
 * @note	For the 'ticks' parameter, see function TIMER_DRIVER_microsecondsToTicks
 */
void TIMER_DRIVER_InitTimer(uint8_t timerNumber , uint32_t ticks, voidFunctionPointer_t voidFunctionPointer)
{
	//Source: http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html

	/*If timer period = CompareMatch0 Period = 0 => ERROR*/
	if (ticks==0)
	{
		errorOcurred();
	}

	/* Enable timer clock and reset it */
	  Chip_TIMER_Init(timer_sd[timerNumber].name);
	  Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
	  while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
	  Chip_TIMER_Reset(timer_sd[timerNumber].name);

	  /* Update the defalut function pointer name of the Compare match 0*/
	  timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMER_MATCH_0] = voidFunctionPointer;

	  // Initialize compare match with the specified ticks (number of counts needed to clear the match counter).
	  Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, TIMER_MATCH_0);
	  Chip_TIMER_SetMatch(timer_sd[timerNumber].name, TIMER_MATCH_0, ticks);

	  /*Makes Timer Match 0 period the timer period*/
	  Chip_TIMER_ResetOnMatchEnable(timer_sd[timerNumber].name, TIMER_MATCH_0);

	  /*Enable timer*/
	  Chip_TIMER_Enable(timer_sd[timerNumber].name);

	  /* Enable timer interrupt */
	  NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
	  NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
	  NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
}

/*Disable Timer.
 * FIXME: TO BE TESTED*/
void TIMER_DRIVER_DeinitTimer(uint8_t timerNumber)
{
	NVIC_DisableIRQ(timer_sd[timerNumber].IRQn);

	Chip_TIMER_DeInit(timer_sd[timerNumber].name);

}

/*
* @brief	Converts a value in microseconds (uS = 1x10^-6 sec) to ticks
* @param	uS:		Value in microseconds
* @return	Equivalent in Ticks for the LPC4337
* @note		Can be used for the second parameter in the TIMER_DRIVER_InitTimer
*/
uint32_t TIMER_DRIVER_microsecondsToTicks(uint32_t uS)
{
	return (uS*(LPC4337_MAX_FREC/1000000));
}

/*
 * @brief	Initialize Timer peripheral
 * @param	timerNumber   : Timer number. It can be TIMER_0, TIMER_1, TIMER_2 or TIMER_3
 * @param	matchNumber	:	Can be TIMER_MATCH_1, TIMER_MATCH_2 or TIMER_MATCH_3
 * @param	ticks   	  : Number of ticks required to reach the compare match.
 * @param	voidFunctionPointer: function to be executed when the compare match is reached
 * @return	None
 * @note	For the 'ticks' parameter, see function TIMER_DRIVER_microsecondsToTicks
 */
void TIMER_DRIVER_DisableCompareMatchOnTimer(uint8_t timerNumber, uint8_t matchNumber)
{
	  timer_dd[timerNumber].timerCompareMatchFunctionPointer[matchNumber] = errorOcurred;

	  Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, matchNumber);
	  Chip_TIMER_SetMatch(timer_sd[timerNumber].name, matchNumber, ticks);
}

/*
 * @brief	Initialize Timer peripheral
 * @param	timerNumber   : Can be TIMER_0, TIMER_1, TIMER_2 or TIMER_3
 * @param	matchNumber	:	Can be TIMER_MATCH_1, TIMER_MATCH_2 or TIMER_MATCH_3
 * @param	ticks   	  : Number of ticks required to reach the compare match.
 * @param	voidFunctionPointer: function to be executed when the compare match is reached
 * @return	None
 * @note	For the 'ticks' parameter, see function TIMER_DRIVER_microsecondsToTicks
 */
void TIMER_DRIVER_EnableCompareMatchOnTimer(uint8_t timerNumber, uint8_t matchNumber , uint32_t ticks, voidFunctionPointer_t voidFunctionPointer)
{
	  timer_dd[timerNumber].timerCompareMatchFunctionPointer[matchNumber] = voidFunctionPointer;

	  Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, matchNumber);
	  Chip_TIMER_SetMatch(timer_sd[timerNumber].name, matchNumber, ticks);
}

/*Allows the user to change the compare value nº 'matchNumber' of timer 'timerNumber'.
 * This is specially useful to generate square waves if used in the function for the TIMER_MATCH_0 (because
 * that compare match resets the timer counter), which will be passed as a parameter when initializing a timer
 * @note: The selected time (3rd parameter) must be less than TIMER_MATCH_0's compareMatchTime_uS
 *  for the compare match to make the interruption
 */
void TIMER_DRIVER_SetTimerMatch(uint8_t timerNumber, uint8_t matchNumber,uint32_t ticks)
{
	Chip_TIMER_SetMatch(timer_sd[timerNumber].name, matchNumber,ticks);

}
/*==================[end of file]============================================*/
