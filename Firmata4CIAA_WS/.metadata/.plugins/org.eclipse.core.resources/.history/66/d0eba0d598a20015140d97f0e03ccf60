/*
 * SERVO_DRIVER.c
 *
 *  Created on: 16/11/2015
 *      Author: Ian
 */

/*==================[inclusions]=============================================*/
#include "main.h"
#include "SERVO_DRIVER.h"
#include "TIMER_DRIVER.h"
#include "HAL.h"


/*==================[macros and definitions]=================================*/
#define EMPTY_POSITION 255
#define MAX_NUMBER_OF_SERVOS 9

#define SERVO_COMPLETE_CYCLE_PERIOD      20000  /*value in uSec. Equals to 20ms*/
#define SERVO_MAX_UPTIME_PERIOD     2000  /*value in uSec. Equals to 2ms. does not take in account the 0.5ms offset */
#define SERVO_MIN_UPTIME_PERIOD 500 /*value in uSec. Equals to 0.5ms*/
/*==================[internal data declaration]==============================*/
typedef struct
{
	uint8_t pin;
	uint32_t angle;
}attachedServo_t;
/*==================[internal functions declaration]=========================*/
/*
void timer1CompareMatch0func(void);
void timer1CompareMatch1func(void);
void timer1CompareMatch2func(void);
void timer1CompareMatch3func(void);
*/

/*==================[internal data definition]===============================*/

/*when the user adds a servo with servoAttach the list updates with the pin number of the element*/
static attachedServo_t AttachedServoList[MAX_NUMBER_OF_SERVOS] =
{
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0},
		{EMPTY_POSITION,0}
};

/*
voidFunctionPointer_t timer1CompareMatchFuncPointers[4]  = {timer1CompareMatch0func,timer1CompareMatch1func,timer1CompareMatch2func,timer1CompareMatch3func};
uint32_t timer1CompareMatchPeriod_uS[4] = {SERVO_COMPLETE_CYCLE_PERIOD, SERVO_MIN_PERIOD,SERVO_MIN_PERIOD,SERVO_MIN_PERIOD};
												^ Periodo del compare match 0
*/

/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

uint32_t angleToPeriod (uint8_t angle)
{
	uint32_t period = 0;

	period = SERVO_MIN_PERIOD +

	return
}

//TODO: tenes que pasar de angulos a ticks, aca o haciendo una funcion el el timer_DRIVER,
 //pq la frequencia del micro en realidad no la sabes vos como SERVO_DRIVER

/*
void timer1CompareMatch0func(void)
{
	if(CIAApins[PIN12].PWMs.mode == SERVO)
	{
		HAL_SetOutput(PIN12,TRUE);
		TIMER_DRIVER_SetTimerMatch(TIMER_0, TIMER_MATCH_1, CIAApins[PIN12].PWMs.servoValue);
	}
	if(CIAApins[PIN18].PWMs.mode == SERVO)
	{
		HAL_SetOutput(PIN18,TRUE);
		TIMER_DRIVER_SetTimerMatch(TIMER_0, TIMER_MATCH_2, CIAApins[PIN18].PWMs.servoValue);
	}
	if(CIAApins[PIN19].PWMs.mode == SERVO)
	{
		HAL_SetOutput(PIN19,TRUE);
		TIMER_DRIVER_SetTimerMatch(TIMER_0, TIMER_MATCH_3, CIAApins[PIN19].PWMs.servoValue);
	}

}

void timer1CompareMatch1func(void)
{
	if(CIAApins[PIN12].PWMs.mode == SERVO){HAL_SetOutput(PIN12,FALSE);}
}

void timer1CompareMatch2func(void)
{
	if(CIAApins[PIN18].PWMs.mode == SERVO){HAL_SetOutput(PIN18,FALSE);}
}

void timer1CompareMatch3func(void)
{
	if(CIAApins[PIN19].PWMs.mode == SERVO){HAL_SetOutput(PIN19,FALSE);}
}

void servoInit(void)
{
	TIMER_DRIVER_InitTimer(TIMER_0, timer1CompareMatchPeriod_uS ,timer1CompareMatchFuncPointers);
}
*/
/*==================[external functions definition]==========================*/
void SERVO_DRIVER_Init(void)
{

}

/*@brief: adds servo (to a pin) to the the list
 *@return: True if servo was successfully attached, False if not.
 * */

bool_t servoAttach( uint8_t pin)
{
	bool_t ret = FALSE;
	uint8_t position = 0;

	position = isServoAttached(pin);
	if(position==0)
	{
		position = isServoAttached(EMPTY_POSITION); //Searches for the first empty position
		if(position) //if position==0 => there is no room in the list for another servo
		{
			AttachedServoList[position-1].pin = pin;
			ret = TRUE;
		}
	}

	return ret;
}


/*TODO: TO BE IMPLEMENTED*/
bool_t servoAttachWithConfig( uint8_t pin, servoConfig_t * servoConfig )
{
	return TRUE;
}


/*
 * @return: position (1 ~ MAX_NUMBER_OF_SERVOS), 0 if the element was not found.
 * */
uint8_t isServoAttached( uint8_t pin )
{
	uint8_t position = 0, ret = 0;
	while ( (position < MAX_NUMBER_OF_SERVOS) && (pin != AttachedServoList[position].pin) ) {
		position++;
	}

	if (position < MAX_NUMBER_OF_SERVOS)
	{
		ret = position + 1;
	}
	else
	{
		ret = 0;
	}

	return ret;
}

/*@brief: removes servo (attached to pin) from the list
 *@return: True if servo was successfully detached, False if not.
 * */
bool_t servoDetach( uint8_t pin )
{
	bool_t ret = FALSE;
	uint8_t position = 0;

	position = isServoAttached(pin);

	if(position)
	{
		AttachedServoList[position-1].pin = EMPTY_POSITION;
		AttachedServoList[position-1].angle = 0;
		ret = TRUE;
	}
	return ret;
}

/*@brief: change the angle of the servo at the selected pin
 *@return: True if the angle was successfully changed, False if not.
 * */
bool_t servoWrite( uint8_t pin, uint8_t angle )
{
	bool_t ret = FALSE;
	uint8_t position = 0;

	position = isServoAttached(pin);

	if(position)
	{
		AttachedServoList[position-1].angle = angle;
		ret = TRUE;
	}

	return ret;
}

/*@brief: read the angle of the servo in the pin
 *@return: angle of the servo in the pin (0 ~ 180). If error => return = EMPTY_POSITION (255)
 * */
uint8_t servoRead( uint8_t pin )
{
	uint8_t position = 0, ret = 0;
	position = isServoAttached(pin);

	if(position)
	{
		ret = AttachedServoList[position-1].angle;
	}
	else
	{
		ret = EMPTY_POSITION;
	}

	return ret;
}


/*==================[end of file]============================================*/
